<?php
/**
 * @file
 * Integrate with Campaign Monitor to create new subscribers via webform
 */


require_once libraries_get_path('createsend-php') . '/csrest_subscribers.php';

/**
 * Implements hook_menu() to get the config page listed
 */
function cm_webform_menu() {
  $items = array();

  $items['admin/settings/cm'] = array(
    'title' => 'Campaign Monitor settings',
    'description' => 'Set up Campaign Monitor Webform integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_webform_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cm_webform.admin.inc',
  );

  return $items;
}

/**
 * Implements of hook_webform_component_info().
 */
function cm_webform_webform_component_info() {
  $components = array();

  $components['cm_signup'] = array(
    'label' => t('Campaign Monitor list signup'),
    'description' => t('Checkboxes for signing up to selected lists'),
    'features' => array(
      'csv' => TRUE,
      'email' => TRUE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => TRUE,
      'conditional' => TRUE,
      'group' => FALSE,
      'attachment' => FALSE,
    ),
    'file' => 'components/cm_signup.inc',
  );

  return $components;
}

/**
 * Implementation of hook_webform_submission_presave().
 */
function cm_webform_webform_submission_presave($node, $submission) {
  $cm = new CS_REST_Subscribers('', variable_get('cm_apikey', ''), 'https');
  
  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['type'] == 'cm_signup') {
      // Extract submitted values
      $list = $component['extra']['lists'];
      $cm->set_list_id($list);
      
      // Field containing emails is based on the component configuration
      $email = $submission->data[$component['extra']['email_field']]['value'][0];
      
      if (!empty($submission->data[$component['extra']['name_field']]['value'])) {
        $name = $submission->data[$component['extra']['name_field']]['value'][0];
      }
      else {
        $name = '';
      }
      
      $fields = array();
      $custom_fields = array_keys(array_filter($component['extra']['custom_fields']));
      foreach ($custom_fields as $field) {
        $fields[] = array('Key' => $node->webform['components'][$field]['form_key'],
                          'Value' => $submission->data[$field]['value'][0]);
      }

      $r = db_fetch_array(db_query("SELECT `data` FROM {webform_submitted_data} WHERE sid = %d AND cid = %d",
                                   $submission->sid, $component['extra']['email_field']));
      
      // If a previous form submission exists, we update it rather than adding a new subscriber
      if ($r !== FALSE) {
        cm_webform_update_subscription($cm, $submission, $cid, $r['data'], $email, $name, $fields);
      }
      else {
        cm_webform_insert_subscription($cm, $email, $name, $fields);
      }
    }
  }
}

/**
 * Helper function to insert a new subscription.
 */
function cm_webform_insert_subscription(&$cm, $email, $name, $fields) {
  $r = $cm->add(array('EmailAddress' => $email,
                      'Name' => $name,
                      'Resubscribe' => FALSE,
                      'CustomFields' => $fields));
  
  if (!$r->was_successful()) {
    watchdog('cm_webform', 'A Campaign Monitor @code error occurred when subscribing @email: @error',
                                 array('@email' => $email, '@error' => $r->response->Message,
                                       '@code' => $r->http_status_code), WATCHDOG_ERROR);
  }
}

/**
 * Helper function to update a pre-existing subscription.
 */
function cm_webform_update_subscription(&$cm, &$submission, $cid, $original_email, $email, $name, $fields) {
  if ($submission->data[$cid]['value'][0] != 1) {
    // They've not checked the "Subscribe" checkbox; if they were previously subscribed, unsubscribe them.
    $r = db_fetch_array(db_query("SELECT `data` FROM {webform_submitted_data} WHERE sid = %d AND cid = %d",
                                 $submission->sid, $cid));
    
    if ($r['data'] == '1') {
      $r = $cm->unsubscribe($original_email);
      if (!$r->was_successful()) {
        watchdog('cm_webform', 'A Campaign Monitor @code error occurred when unsubscribing @email: @error',
                                 array('@email' => $original_email, '@error' => $r->response->Message,
                                       '@code' => $r->http_status_code), WATCHDOG_ERROR);
      }
    }
    return;
  }
  
  // Update the selected subscription
  $r = $cm->update($original_email, array('EmailAddress' => $email,
                                          'Name' => $name,
                                          'Resubscribe' => FALSE,
                                          'CustomFields' => $fields));
  
  if (!$r->was_successful()) {
    watchdog('cm_webform', 'A Campaign Monitor @code error occurred when updating the subscription of @email: @error',
                             array('@email' => $original_email, '@error' => $r->response->Message,
                                   '@code' => $r->http_status_code), WATCHDOG_ERROR);
  }
}

/**
 * Implementation of hook_webform_submission_delete().
 */
function cm_webform_webform_submission_delete($node, $submission) {
  //For now we do nothing
  //Consider deleting the list subscription if possible
}
